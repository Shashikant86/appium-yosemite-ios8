{
  "author": {
    "name": "Jed Schmidt",
    "email": "tr@nslator.jp",
    "url": "http://jed.is"
  },
  "name": "crx",
  "description": "Build Google Chrome extensions with node.js",
  "version": "0.4.4",
  "homepage": "https://github.com/jed/crx",
  "bin": {
    "crx": "./bin/crx.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jed/crx.git"
  },
  "main": "./src/crx.js",
  "engines": {
    "node": ">=0.7.12"
  },
  "scripts": {
    "test": "node ./test/index.js"
  },
  "dependencies": {
    "commander": "",
    "archiver": "0.8.x",
    "wrench": "1.5.x"
  },
  "devDependencies": {},
  "readme": "crx\n===\n\n[![Build Status](https://secure.travis-ci.org/jed/crx.png)](http://travis-ci.org/jed/crx)\n\ncrx is a [node.js](http://nodejs.org/) command line app for packing Google Chrome extensions. If you'd like to integrate it into your [grunt](http://gruntjs.com/) workflow, give [oncletom](https://github.com/oncletom)'s [grunt-crx](https://github.com/oncletom/grunt-crx) a spin.\n\n## Requirements\n\n* [node.js](http://nodejs.org/), tested with >= 0.7.12\n* openssl\n* ssh-keygen\n\n## Install\n\n    $ npm install crx\n\n## Module API\n\n### ChromeExtension = require(\"crx\")\n### crx = new ChromeExtension(attrs)\n\nThis module exports the `ChromeExtension` constructor directly, which can take an optional attribute object, which is used to extend the instance.\n\n### crx.load(path, callback)\n\nLoads the Chrome Extension from the specified path.\n\n### crx.pack(callback)\n\nPacks the Chrome Extension, and calls back with a Buffer containing the `.crx` file.\n\n### crx.generateUpdateXML()\n\nReturns a Buffer containing the update.xml file used for autoupdate, as specified for `update_url` in the manifest. In this case, the instance must have a property called `codebase`.\n\n### crx.destroy()\n\nDestroys all of the temporary resources used for packing.\n\n## Module example\n\n```javascript\nvar fs = require(\"fs\")\n  , ChromeExtension = require(\"crx\")\n  , join = require(\"path\").join\n  , crx = new ChromeExtension(\n      codebase: \"http://localhost:8000/myFirstExtension.crx\",\n      privateKey: fs.readFileSync(join(__dirname, \"key.pem\")),\n      rootDirectory: join(__dirname, \"myFirstExtension\")\n    })\n\ncrx.load(function(err) {\n  if (err) throw err\n\n  this.pack(function(err, data){\n    if (err) throw err\n\n    var updateXML = this.generateUpdateXML()\n\n    fs.writeFile(join(__dirname, \"update.xml\"), updateXML)\n    fs.writeFile(join(__dirname, \"myFirstExtension.crx\"), data)\n  \n    this.destroy()\n  })\n})\n```\n\n## CLI API\n\n### crx pack [directory] [-f file] [-p private-key]\n\nPack the specified directory into a .crx package, and output it to stdout. If no directory is specified, the current working directory is used.\n\nUse the `-f` option to output to a file instead of stdout; if no file is specified, the package is given the same name as the directory basename.\n\nUse the `-p` option to specify an external private key. If this is not used, `key.pem` is used from within the directory. If this option is not used and no `key.pem` file exists, one will be generated automatically.\n\nUse the `-b` option to specify the maximum buffer allowed to generate extension. By default, will rely on `node` internal setting (~200KB).\n\n### crx keygen [directory]\n\nGenerate a 1,024-bit RSA private key within the directory. This is called automatically if a key is not specified, and `key.pem` does not exist.\n\n### crx -h\n\nShow information about using this utility, generated by [commander](https://github.com/visionmedia/commander.js).\n\n## CLI example\n\nGiven the following directory structure:\n\n    └─┬ myFirstExtension\n      ├── manifest.json\n      └── icon.png\n\nrun this:\n\n    cd myFirstExtension\n    crx pack -f\n\nto generate this:\n\n    ├─┬ myFirstExtension\n    │ ├── manifest.json\n    │ ├── icon.png\n    │ └── key.pem\n    └── myFirstExtension.crx\n\nYou can also name the output file like this:\n\n    cd myFirstExtension\n    crx pack -f myFirstExtension.crx\n\nto get the same results, or also pipe to the file manually like this.\n\n    cd myFirstExtension\n    crx pack > ../myFirstExtension.crx\n\nAs you can see a key is generated for you at `key.pem` if none exists. You can also specify an external key. So if you have this:\n\n    ├─┬ myFirstExtension\n    │ ├── manifest.json\n    │ └── icon.png\n    └── myPrivateKey.pem\n\nyou can run this:\n\n    crx pack myFirstExtension -p myPrivateKey.pem -f\n\nto sign your package without keeping the key in the directory.\n\nCopyright\n---------\n\nCopyright (c) 2012 Jed Schmidt. See LICENSE.txt for details.\n\nSend any questions or comments [here](http://twitter.com/jedschmidt).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jed/crx/issues"
  },
  "_id": "crx@0.4.4",
  "_from": "crx@~0.4.1"
}
