{
  "author": {
    "name": "Felix Geisend√∂rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "name": "sandboxed-module",
  "description": "A sandboxed Node.js module loader that lets you inject dependencies into your modules.",
  "keywords": [
    "require",
    "mocking",
    "mocks",
    "stubs",
    "dependency injection",
    "testing"
  ],
  "license": "MIT",
  "version": "1.0.2",
  "homepage": "https://github.com/felixge/node-sandboxed-module",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-sandboxed-module.git"
  },
  "bugs": {
    "url": "http://github.com/felixge/node-sandboxed-module/issues"
  },
  "main": "./lib/sandboxed_module",
  "scripts": {
    "test": "node test/run"
  },
  "dependencies": {
    "require-like": "0.1.2",
    "stack-trace": "0.0.9"
  },
  "devDependencies": {
    "urun": "0.0.8",
    "coffee-script": "1.7.x",
    "istanbul": "~0.2.11"
  },
  "readme": "# sandboxed-module\n\n[![Build Status](https://secure.travis-ci.org/felixge/node-sandboxed-module.png)](http://travis-ci.org/felixge/node-sandboxed-module)\n\nA sandboxed node.js module loader that lets you inject dependencies into your\nmodules.\n\n## Installation\n\n``` bash\nnpm install sandboxed-module\n```\n\n## Usage\n\n``` javascript\nvar SandboxedModule = require('sandboxed-module');\nvar user = SandboxedModule.require('./user', {\n  requires: {'mysql': {fake: 'mysql module'}},\n  globals: {myGlobal: 'variable'},\n  locals: {myLocal: 'other variable'},\n});\n```\n\n## What to do with this\n\nThis module is intended to ease dependency injection for unit testing. However,\nfeel free to use it for whatever crimes you can think of.\n\n## API\n\n### SandboxedModule.load(moduleId, [options])\n\nReturns a new `SandboxedModule` where `moduleId` is a regular module path / id\nas you would normally pass into `require()`. The new module will be loaded in\nits own v8 context, but otherwise have access to the normal node.js\nenvironment.\n\n`options` is an optional object that can be used to inject any of the\nfollowing:\n\n* `requires:` An object containing `moduleId`s and the values to inject for\n  them when required by the sandboxed module. This does not affect children\n  of the sandboxed module.\n* `globals:` An object of global variables to inject into the sandboxed module.\n* `locals:` An object of local variables to inject into the sandboxed module.\n* `sourceTransformers:` An object of named functions to transform the source code of\nthe sandboxed module's file (e.g. transpiler language, code coverage).\n* `singleOnly:` If false - modules that are required by the sandboxed module will not\nbe sandboxed. By default all modules required by the sandboxedModule will be sandboxed\nusing the same options that were used for the original sandboxed module\n\n### SandboxedModule.require(moduleId, [options])\n\nIdentical to `SandboxedModule.load()`, but returns `sandboxedModule.exports`\ndirectly.\n\n### SandboxedModule.configure(options)\n\nSets options globally across all uses of `SandboxedModule.load()` and\n`SandboxedModule.require()`. This way, a commonly needed require, global, local,\nor sourceTransformer can be specified once across all sandboxed modules.\n\n### SandboxedModule.registerBuiltInSourceTransformer(name)\n\nEnables a built-in source transformer by name. Currently, SandboxedModule ships\nwith two built in source transformers:\n\n* \"coffee\" - Compiles source with CoffeeScript [Enabled by default for backwards compatibility].\n  Be sure to run `require('coffee-script').register()` or `require('coffee-script/register')` as well.\n* \"istanbul\" - Instruments sources via istanbul when istanbul code coverage is running.\n\nFor example, if you'd like to use SandboxedModule in conjunction with istanbul,\njust run `SandboxedModule.registerBuiltInSourceTransformer('istanbul')`.\n\n### sandboxedModule.filename\n\nThe full path to the module.\n\n### sandboxedModule.module\n\nThe underlaying node.js `Module` instance.\n\n### sandboxedModule.exports\n\nA getter returning the `sandboxedModule.module.exports` object.\n\n### sandboxedModule.globals\n\nThe global object of the v8 context this module was loaded in. Modifications\nto this object will be reflected in the sandboxed module.\n\n### sandboxedModule.locals\n\nThe local variables injected into the sandboxed module using a closure.\nModifying this object has no effect on the state of the sandbox.\n\n### sandboxedModule.required\n\nAn object holding a list of all module required by the sandboxed module itself.\nThe keys are the `moduleId`s used for the require calls.\n\n### sandboxedModule.sourceTransformers\n\nAn object of named functions which will transform the source code required with\n`SandboxedModule.require`. For example, CoffeeScript &\n[istanbul](https://github.com/gotwarlost/istanbul) support is implemented with\nbuilt-in sourceTransformer functions (see `#registerBuiltInSourceTransformer`).\n\nA source transformer receives the source (as it's been transformed thus far) and\n**must** return the transformed source (whether it's changed or unchanged).\n\nAn example source transformer to change all instances of the number \"3\" to \"5\"\nwould look like this:\n\n``` javascript\nSandboxedModule.require('../fixture/baz', {\n  sourceTransformers: {\n    turn3sInto5s: function(source) {\n      return source.replace(/3/g,'5');\n    }\n  }\n})\n```\n\n## License\n\nsandboxed-module is licensed under the MIT license.\n",
  "readmeFilename": "Readme.md",
  "_id": "sandboxed-module@1.0.2",
  "_from": "sandboxed-module@~1.0.0"
}
